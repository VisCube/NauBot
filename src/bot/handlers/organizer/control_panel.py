from aiogram import F, Router, Bot
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from src.bot.filters.user import OrganizerFilter
from src.bot.keyboards.organizer import get_control_panel_keyboard, get_cancel_keyboard, get_menu_keyboard
from src.bot.templates.organizer import *
from src.db.dao.dao import DAOManager
from src.db.models import RoleEnum, Question
from src.db.base import connection

router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
class PostStates(StatesGroup):
    enter_text = State()


class NotificationStates(StatesGroup):
    enter_text = State()


class ChatLinkStates(StatesGroup):
    enter_link = State()


@router.message(F.text == BUTTON_MANAGE, OrganizerFilter())
async def control_panel_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await message.answer(
        text=MESSAGE_CONTROL_PANEL,
        reply_markup=get_control_panel_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(F.text == BUTTON_WRITE_POST, OrganizerFilter())
async def write_post_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await message.answer(
        text=MESSAGE_WRITE_POST,
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(PostStates.enter_text)


@router.message(PostStates.enter_text, OrganizerFilter())
@connection
async def process_post_text(message: Message, session, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await control_panel_menu(message)
        return

    post_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    author_name = message.from_user.first_name
    if message.from_user.last_name:
        author_name += f" {message.from_user.last_name}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º
    post_message = f"""<b>üì¢ –ù–û–í–´–ô –ü–û–°–¢</b>

{post_text}

<i>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {author_name}</i>"""

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤)
    from sqlalchemy.future import select
    from src.db.models import User

    query = select(User)  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(query)
    users = result.scalars().all()

    sent_count = 0
    error_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=post_message,
                parse_mode=ParseMode.HTML
            )
            sent_count += 1
        except Exception as e:
            error_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")

    # –°–æ–æ–±—â–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    result_text = f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    if error_count > 0:
        result_text += f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {error_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"

    await message.answer(
        text=result_text,
        reply_markup=get_control_panel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text == BUTTON_SEND_NOTIFICATION, OrganizerFilter())
async def send_notification_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await message.answer(
        text=MESSAGE_WRITE_NOTIFICATION,
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(NotificationStates.enter_text)


@router.message(NotificationStates.enter_text, OrganizerFilter())
@connection
async def process_notification_text(message: Message, session, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await control_panel_menu(message)
        return

    notification_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
    author_id = message.from_user.id
    author_name = message.from_user.first_name
    if message.from_user.last_name:
        author_name += f" {message.from_user.last_name}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    notification_message = f"""<b>üì£ –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

{notification_text}"""

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
    from sqlalchemy.future import select
    from src.db.models import User

    query = select(User)#.where(User.role == RoleEnum.participant)
    result = await session.execute(query)
    users = result.scalars().all()

    sent_count = 0
    error_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=notification_message,
                parse_mode=ParseMode.HTML
            )
            sent_count += 1
        except Exception as e:
            error_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ {author_id}: {e}")

    # –°–æ–æ–±—â–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    result_text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"

    if users:
        result_text += f"\n\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
        if error_count > 0:
            result_text += f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: {error_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
    else:
        result_text += "\n\n–í–Ω–∏–º–∞–Ω–∏–µ: –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    await message.answer(
        text=result_text,
        reply_markup=get_control_panel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—â–∏–π —á–∞—Ç
@router.message(F.text == BUTTON_ADD_CHAT_LINK, OrganizerFilter())
async def add_chat_link_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç"""
    await message.answer(
        text=MESSAGE_ENTER_CHAT_LINK,
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ChatLinkStates.enter_link)


#TODO –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–¥ –ø–æ–∫–∞
@router.message(ChatLinkStates.enter_link, OrganizerFilter())
@connection
async def process_chat_link(message: Message, session, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await control_panel_menu(message)
        return

    link = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if not (link.startswith("https://t.me/") or link.startswith("http://t.me/") or
            link.startswith("t.me/") or link.startswith("@")):
        await message.answer(
            text="–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram —á–∞—Ç.",
            reply_markup=get_cancel_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Question –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Å—Å—ã–ª–∫–æ–π
    from sqlalchemy.future import select
    query = select(Question).where(Question.answer_text.like("CHAT_LINK:%"))
    result = await session.execute(query)
    chat_link_record = result.scalar_one_or_none()

    if chat_link_record:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        chat_link_record.answer_text = f"CHAT_LINK:{link}"
        chat_link_record.created_at = datetime.now()
        session.add(chat_link_record)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        chat_link = Question(
            sender_id=message.from_user.id,
            masterclass_id=None,
            is_answered=True,
            answer_text=f"CHAT_LINK:{link}",
            created_at=datetime.now()
        )
        session.add(chat_link)

    await session.commit()

    await message.answer(
        text=MESSAGE_CHAT_LINK_SAVED.format(link=link),
        reply_markup=get_control_panel_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.clear()


@router.message(F.text == BUTTON_BACK, OrganizerFilter())
async def return_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    await message.answer(
        text=MESSAGE_RETURN_TO_MAIN,
        reply_markup=get_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )